//
// WARNING: This file is automatically generated!  Please edit onnx.in.proto.
//

// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: onnx-data.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequenceProto_DataType int32

const (
	SequenceProto_UNDEFINED     SequenceProto_DataType = 0
	SequenceProto_TENSOR        SequenceProto_DataType = 1
	SequenceProto_SPARSE_TENSOR SequenceProto_DataType = 2
	SequenceProto_SEQUENCE      SequenceProto_DataType = 3
	SequenceProto_MAP           SequenceProto_DataType = 4
	SequenceProto_OPTIONAL      SequenceProto_DataType = 5
)

// Enum value maps for SequenceProto_DataType.
var (
	SequenceProto_DataType_name = map[int32]string{
		0: "UNDEFINED",
		1: "TENSOR",
		2: "SPARSE_TENSOR",
		3: "SEQUENCE",
		4: "MAP",
		5: "OPTIONAL",
	}
	SequenceProto_DataType_value = map[string]int32{
		"UNDEFINED":     0,
		"TENSOR":        1,
		"SPARSE_TENSOR": 2,
		"SEQUENCE":      3,
		"MAP":           4,
		"OPTIONAL":      5,
	}
)

func (x SequenceProto_DataType) Enum() *SequenceProto_DataType {
	p := new(SequenceProto_DataType)
	*p = x
	return p
}

func (x SequenceProto_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequenceProto_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_onnx_data_proto_enumTypes[0].Descriptor()
}

func (SequenceProto_DataType) Type() protoreflect.EnumType {
	return &file_onnx_data_proto_enumTypes[0]
}

func (x SequenceProto_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SequenceProto_DataType.Descriptor instead.
func (SequenceProto_DataType) EnumDescriptor() ([]byte, []int) {
	return file_onnx_data_proto_rawDescGZIP(), []int{0, 0}
}

type OptionalProto_DataType int32

const (
	OptionalProto_UNDEFINED     OptionalProto_DataType = 0
	OptionalProto_TENSOR        OptionalProto_DataType = 1
	OptionalProto_SPARSE_TENSOR OptionalProto_DataType = 2
	OptionalProto_SEQUENCE      OptionalProto_DataType = 3
	OptionalProto_MAP           OptionalProto_DataType = 4
	OptionalProto_OPTIONAL      OptionalProto_DataType = 5
)

// Enum value maps for OptionalProto_DataType.
var (
	OptionalProto_DataType_name = map[int32]string{
		0: "UNDEFINED",
		1: "TENSOR",
		2: "SPARSE_TENSOR",
		3: "SEQUENCE",
		4: "MAP",
		5: "OPTIONAL",
	}
	OptionalProto_DataType_value = map[string]int32{
		"UNDEFINED":     0,
		"TENSOR":        1,
		"SPARSE_TENSOR": 2,
		"SEQUENCE":      3,
		"MAP":           4,
		"OPTIONAL":      5,
	}
)

func (x OptionalProto_DataType) Enum() *OptionalProto_DataType {
	p := new(OptionalProto_DataType)
	*p = x
	return p
}

func (x OptionalProto_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionalProto_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_onnx_data_proto_enumTypes[1].Descriptor()
}

func (OptionalProto_DataType) Type() protoreflect.EnumType {
	return &file_onnx_data_proto_enumTypes[1]
}

func (x OptionalProto_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionalProto_DataType.Descriptor instead.
func (OptionalProto_DataType) EnumDescriptor() ([]byte, []int) {
	return file_onnx_data_proto_rawDescGZIP(), []int{2, 0}
}

// Sequences
//
// Defines a dense, ordered, collection of elements that are of homogeneous types.
// Sequences can be made out of tensors, maps, or sequences.
//
// If a sequence is made out of tensors, the tensors must have the same element
// type (i.e. int32). In some cases, the tensors in a sequence can have different
// shapes.  Whether the tensors can have different shapes or not depends on the
// type/shape associated with the corresponding "ValueInfo". For example,
// "Sequence<Tensor<float, [M,N]>" means that all tensors have same shape. However,
// "Sequence<Tensor<float, [omitted,omitted]>" means they can have different
// shapes (all of rank 2), where "omitted" means the corresponding dimension has
// no symbolic/constant value. Finally, "Sequence<Tensor<float, omitted>>" means
// that the different tensors can have different ranks, when the "shape" itself
// is omitted from the tensor-type. For a more complete description, refer to
// https://github.com/onnx/onnx/blob/main/docs/IR.md#static-tensor-shapes.
type SequenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The data type of the element.
	// This field MUST have a valid SequenceProto.DataType value
	ElemType int32 `protobuf:"varint,2,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`
	// For TensorProto values.
	// When this field is present, the elem_type field MUST be TENSOR.
	TensorValues []*TensorProto `protobuf:"bytes,3,rep,name=tensor_values,json=tensorValues,proto3" json:"tensor_values,omitempty"`
	// For SparseTensorProto values.
	// When this field is present, the elem_type field MUST be SPARSE_TENSOR.
	SparseTensorValues []*SparseTensorProto `protobuf:"bytes,4,rep,name=sparse_tensor_values,json=sparseTensorValues,proto3" json:"sparse_tensor_values,omitempty"`
	// For SequenceProto values, allowing sequences to be of themselves.
	// When this field is present, the elem_type field MUST be SEQUENCE.
	SequenceValues []*SequenceProto `protobuf:"bytes,5,rep,name=sequence_values,json=sequenceValues,proto3" json:"sequence_values,omitempty"`
	// For MapProto values.
	// When this field is present, the elem_type field MUST be MAP.
	MapValues []*MapProto `protobuf:"bytes,6,rep,name=map_values,json=mapValues,proto3" json:"map_values,omitempty"`
	// For OptionalProto values.
	// When this field is present, the elem_type field MUST be Optional.
	OptionalValues []*OptionalProto `protobuf:"bytes,7,rep,name=optional_values,json=optionalValues,proto3" json:"optional_values,omitempty"`
}

func (x *SequenceProto) Reset() {
	*x = SequenceProto{}
	mi := &file_onnx_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceProto) ProtoMessage() {}

func (x *SequenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_onnx_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceProto.ProtoReflect.Descriptor instead.
func (*SequenceProto) Descriptor() ([]byte, []int) {
	return file_onnx_data_proto_rawDescGZIP(), []int{0}
}

func (x *SequenceProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SequenceProto) GetElemType() int32 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

func (x *SequenceProto) GetTensorValues() []*TensorProto {
	if x != nil {
		return x.TensorValues
	}
	return nil
}

func (x *SequenceProto) GetSparseTensorValues() []*SparseTensorProto {
	if x != nil {
		return x.SparseTensorValues
	}
	return nil
}

func (x *SequenceProto) GetSequenceValues() []*SequenceProto {
	if x != nil {
		return x.SequenceValues
	}
	return nil
}

func (x *SequenceProto) GetMapValues() []*MapProto {
	if x != nil {
		return x.MapValues
	}
	return nil
}

func (x *SequenceProto) GetOptionalValues() []*OptionalProto {
	if x != nil {
		return x.OptionalValues
	}
	return nil
}

// Maps
//
// Specifies an associative table, defined by keys and values.
// MapProto is formed with a repeated field of keys (of type INT8, INT16, INT32,
// INT64, UINT8, UINT16, UINT32, UINT64, or STRING) and values (of type TENSOR,
// SPARSE_TENSOR, SEQUENCE, or MAP). Key types and value types have to remain
// the same throughout the instantiation of the MapProto.
type MapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The data type of the key.
	// This field MUST have a valid TensorProto.DataType value of
	// INT8, INT16, INT32, INT64, UINT8, UINT16, UINT32, UINT64, or STRING
	KeyType int32 `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	// Every element of keys has to be one of the following data types
	// INT8, INT16, INT32, INT64, UINT8, UINT16, UINT32, UINT64, or STRING.
	// The integer cases are represented by the repeated int64 field keys below.
	Keys []int64 `protobuf:"varint,3,rep,packed,name=keys,proto3" json:"keys,omitempty"`
	// If keys are strings, they are represented by the repeated bytes field
	// string_keys below.
	StringKeys [][]byte `protobuf:"bytes,4,rep,name=string_keys,json=stringKeys,proto3" json:"string_keys,omitempty"`
	// MapProto values are represented in a SequenceProto of the same length as the
	// repeated keys field and have to be one of the following data types
	// TENSOR, SPARSE_TENSOR, MAP, SEQUENCE.
	Values *SequenceProto `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *MapProto) Reset() {
	*x = MapProto{}
	mi := &file_onnx_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapProto) ProtoMessage() {}

func (x *MapProto) ProtoReflect() protoreflect.Message {
	mi := &file_onnx_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapProto.ProtoReflect.Descriptor instead.
func (*MapProto) Descriptor() ([]byte, []int) {
	return file_onnx_data_proto_rawDescGZIP(), []int{1}
}

func (x *MapProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapProto) GetKeyType() int32 {
	if x != nil {
		return x.KeyType
	}
	return 0
}

func (x *MapProto) GetKeys() []int64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MapProto) GetStringKeys() [][]byte {
	if x != nil {
		return x.StringKeys
	}
	return nil
}

func (x *MapProto) GetValues() *SequenceProto {
	if x != nil {
		return x.Values
	}
	return nil
}

// Optional
type OptionalProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The data type of the element, identifies if the OptionalProto value
	// is Tensor, Sparse Tensor, Sequence, Map, or Optional.
	// The type of the optional value MUST match the elem_type specified.
	// This field MUST have a valid OptionalProto.DataType value.
	ElemType int32 `protobuf:"varint,2,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`
	// For TensorProto value.
	// When this field is present, the elem_type field MUST be TENSOR.
	TensorValue *TensorProto `protobuf:"bytes,3,opt,name=tensor_value,json=tensorValue,proto3" json:"tensor_value,omitempty"`
	// For SparseTensorProto value.
	// When this field is present, the elem_type field MUST be SPARSE_TENSOR.
	SparseTensorValue *SparseTensorProto `protobuf:"bytes,4,opt,name=sparse_tensor_value,json=sparseTensorValue,proto3" json:"sparse_tensor_value,omitempty"`
	// For SequenceProto value.
	// When this field is present, the elem_type field MUST be SEQUENCE.
	SequenceValue *SequenceProto `protobuf:"bytes,5,opt,name=sequence_value,json=sequenceValue,proto3" json:"sequence_value,omitempty"`
	// For MapProto value.
	// When this field is present, the elem_type field MUST be MAP.
	MapValue *MapProto `protobuf:"bytes,6,opt,name=map_value,json=mapValue,proto3" json:"map_value,omitempty"`
	// For OptionalProto value, allowing optional to be of itself (completeness)
	// When this field is present, the elem_type field MUST be OPTIONAL.
	OptionalValue *OptionalProto `protobuf:"bytes,7,opt,name=optional_value,json=optionalValue,proto3" json:"optional_value,omitempty"`
}

func (x *OptionalProto) Reset() {
	*x = OptionalProto{}
	mi := &file_onnx_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalProto) ProtoMessage() {}

func (x *OptionalProto) ProtoReflect() protoreflect.Message {
	mi := &file_onnx_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalProto.ProtoReflect.Descriptor instead.
func (*OptionalProto) Descriptor() ([]byte, []int) {
	return file_onnx_data_proto_rawDescGZIP(), []int{2}
}

func (x *OptionalProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionalProto) GetElemType() int32 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

func (x *OptionalProto) GetTensorValue() *TensorProto {
	if x != nil {
		return x.TensorValue
	}
	return nil
}

func (x *OptionalProto) GetSparseTensorValue() *SparseTensorProto {
	if x != nil {
		return x.SparseTensorValue
	}
	return nil
}

func (x *OptionalProto) GetSequenceValue() *SequenceProto {
	if x != nil {
		return x.SequenceValue
	}
	return nil
}

func (x *OptionalProto) GetMapValue() *MapProto {
	if x != nil {
		return x.MapValue
	}
	return nil
}

func (x *OptionalProto) GetOptionalValue() *OptionalProto {
	if x != nil {
		return x.OptionalValue
	}
	return nil
}

var File_onnx_data_proto protoreflect.FileDescriptor

var file_onnx_data_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x6e, 0x6e, 0x78, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0d, 0x6f, 0x6e, 0x6e, 0x78, 0x2d,
	0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x41, 0x50, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x05, 0x22, 0x9d, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xcd, 0x03, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a,
	0x13, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x41, 0x50, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x05, 0x42, 0x02, 0x48, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_onnx_data_proto_rawDescOnce sync.Once
	file_onnx_data_proto_rawDescData = file_onnx_data_proto_rawDesc
)

func file_onnx_data_proto_rawDescGZIP() []byte {
	file_onnx_data_proto_rawDescOnce.Do(func() {
		file_onnx_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_onnx_data_proto_rawDescData)
	})
	return file_onnx_data_proto_rawDescData
}

var file_onnx_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_onnx_data_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_onnx_data_proto_goTypes = []any{
	(SequenceProto_DataType)(0), // 0: protos.SequenceProto.DataType
	(OptionalProto_DataType)(0), // 1: protos.OptionalProto.DataType
	(*SequenceProto)(nil),       // 2: protos.SequenceProto
	(*MapProto)(nil),            // 3: protos.MapProto
	(*OptionalProto)(nil),       // 4: protos.OptionalProto
	(*TensorProto)(nil),         // 5: protos.TensorProto
	(*SparseTensorProto)(nil),   // 6: protos.SparseTensorProto
}
var file_onnx_data_proto_depIdxs = []int32{
	5,  // 0: protos.SequenceProto.tensor_values:type_name -> protos.TensorProto
	6,  // 1: protos.SequenceProto.sparse_tensor_values:type_name -> protos.SparseTensorProto
	2,  // 2: protos.SequenceProto.sequence_values:type_name -> protos.SequenceProto
	3,  // 3: protos.SequenceProto.map_values:type_name -> protos.MapProto
	4,  // 4: protos.SequenceProto.optional_values:type_name -> protos.OptionalProto
	2,  // 5: protos.MapProto.values:type_name -> protos.SequenceProto
	5,  // 6: protos.OptionalProto.tensor_value:type_name -> protos.TensorProto
	6,  // 7: protos.OptionalProto.sparse_tensor_value:type_name -> protos.SparseTensorProto
	2,  // 8: protos.OptionalProto.sequence_value:type_name -> protos.SequenceProto
	3,  // 9: protos.OptionalProto.map_value:type_name -> protos.MapProto
	4,  // 10: protos.OptionalProto.optional_value:type_name -> protos.OptionalProto
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_onnx_data_proto_init() }
func file_onnx_data_proto_init() {
	if File_onnx_data_proto != nil {
		return
	}
	file_onnx_ml_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onnx_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_onnx_data_proto_goTypes,
		DependencyIndexes: file_onnx_data_proto_depIdxs,
		EnumInfos:         file_onnx_data_proto_enumTypes,
		MessageInfos:      file_onnx_data_proto_msgTypes,
	}.Build()
	File_onnx_data_proto = out.File
	file_onnx_data_proto_rawDesc = nil
	file_onnx_data_proto_goTypes = nil
	file_onnx_data_proto_depIdxs = nil
}
