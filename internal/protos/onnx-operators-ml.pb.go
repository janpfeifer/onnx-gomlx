//
// WARNING: This file is automatically generated!  Please edit onnx.in.proto.
//

// Copyright (c) ONNX Project Contributors.
// Licensed under the Apache-2.0 license.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: onnx-operators-ml.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An OperatorProto represents the immutable specification of the signature
// and semantics of an operator.
//
// Operators are declared as part of an OperatorSet, which also defines the
// domain name for the set.
//
// Operators are uniquely identified by a three part identifier
//
//	(domain, op_type, since_version)
//
// where
//
//	*domain* is the domain of an operator set that
//	   contains this operator specification.
//
//	*op_type* is the name of the operator as referenced by a
//	   NodeProto.op_type
//
//	*since_version* is the version of the operator set that
//	   this operator was initially declared in.
type OperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the operator within a domain.
	// This field MUST be present in this version of the IR.
	OpType string `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	// The version of the operator set that first introduced this
	// operator. This value MUST be the same value as the
	// opset_version of the operator set that first published this operator.
	// Subsequent versions of the operator set MUST NOT alter the signature
	// or semantics of the operator once published as STABLE.
	// This field MUST be present in this version of the IR.
	SinceVersion int64 `protobuf:"varint,2,opt,name=since_version,json=sinceVersion,proto3" json:"since_version,omitempty"`
	// This field indicates whether the syntax, semantics, or presence
	// of this operator is in an experimental or stable stage. Once an
	// operator is published as STABLE, it's syntax and semantics MUST NOT
	// change in subsequent versions of the operator set.
	// When an operator is published as EXPERIMENTAL, the syntax and semantics
	// of the operator MAY change across operator set versions.
	// Operators "become" stable by deprecating the experimental version and
	// introducing a new stable operator with the same op_type.
	Status OperatorStatus `protobuf:"varint,3,opt,name=status,proto3,enum=protos.OperatorStatus" json:"status,omitempty"`
	// A human-readable documentation for this operator. Markdown is allowed.
	DocString string `protobuf:"bytes,10,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
}

func (x *OperatorProto) Reset() {
	*x = OperatorProto{}
	mi := &file_onnx_operators_ml_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorProto) ProtoMessage() {}

func (x *OperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_onnx_operators_ml_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorProto.ProtoReflect.Descriptor instead.
func (*OperatorProto) Descriptor() ([]byte, []int) {
	return file_onnx_operators_ml_proto_rawDescGZIP(), []int{0}
}

func (x *OperatorProto) GetOpType() string {
	if x != nil {
		return x.OpType
	}
	return ""
}

func (x *OperatorProto) GetSinceVersion() int64 {
	if x != nil {
		return x.SinceVersion
	}
	return 0
}

func (x *OperatorProto) GetStatus() OperatorStatus {
	if x != nil {
		return x.Status
	}
	return OperatorStatus_EXPERIMENTAL
}

func (x *OperatorProto) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

// An OperatorSetProto represents an immutable set of immutable operator
// specifications.
//
// The domain of the set (OperatorSetProto.domain) is a reverse-DNS name
// that disambiguates operator sets defined by independent entities.
//
// The version of the set (opset_version) is a monotonically increasing
// integer that indicates changes to the membership of the operator set.
//
// Operator sets are uniquely identified by a two part identifier (domain, opset_version)
//
// Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
// and thus has the standard format headers in addition to the operator set information.
type OperatorSetProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All OperatorSetProtos start with a distingushed byte sequence to disambiguate
	// protobuf files containing OperatorSets from other content.
	// This field MUST be "ONNXOPSET"
	// This field MUST be present in this version of the IR
	Magic string `protobuf:"bytes,1,opt,name=magic,proto3" json:"magic,omitempty"`
	// All OperatorSetProtos indicate the version of the IR syntax and semantics
	// they adhere to. It is always IR_VERSION.
	// This field MUST be present in this version of the IR
	IrVersion int64 `protobuf:"varint,2,opt,name=ir_version,json=irVersion,proto3" json:"ir_version,omitempty"`
	// The prerelease component of the SemVer of the IR.
	// This field MAY be absent in this version of the IR
	IrVersionPrerelease string `protobuf:"bytes,3,opt,name=ir_version_prerelease,json=irVersionPrerelease,proto3" json:"ir_version_prerelease,omitempty"`
	// The build metadata component of the SemVer of the IR.
	// This field MAY be absent in this version of the IR
	IrBuildMetadata string `protobuf:"bytes,7,opt,name=ir_build_metadata,json=irBuildMetadata,proto3" json:"ir_build_metadata,omitempty"`
	// Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// The version of the set of operators. This is a simple int value
	// that is monotonically increasing as new versions of the operator set
	// are published. All operators in this set MUST have since_version
	// <= opset_version.
	OpsetVersion int64 `protobuf:"varint,5,opt,name=opset_version,json=opsetVersion,proto3" json:"opset_version,omitempty"`
	// A human-readable documentation for this set of operators. Markdown is allowed.
	DocString string `protobuf:"bytes,6,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The operators specified by this operator set.
	// The (name, version) MUST be unique across all OperatorProtos in operator
	Operator []*OperatorProto `protobuf:"bytes,8,rep,name=operator,proto3" json:"operator,omitempty"`
	// The functions specified by this operator set.
	// The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
	Functions []*FunctionProto `protobuf:"bytes,9,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (x *OperatorSetProto) Reset() {
	*x = OperatorSetProto{}
	mi := &file_onnx_operators_ml_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSetProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSetProto) ProtoMessage() {}

func (x *OperatorSetProto) ProtoReflect() protoreflect.Message {
	mi := &file_onnx_operators_ml_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSetProto.ProtoReflect.Descriptor instead.
func (*OperatorSetProto) Descriptor() ([]byte, []int) {
	return file_onnx_operators_ml_proto_rawDescGZIP(), []int{1}
}

func (x *OperatorSetProto) GetMagic() string {
	if x != nil {
		return x.Magic
	}
	return ""
}

func (x *OperatorSetProto) GetIrVersion() int64 {
	if x != nil {
		return x.IrVersion
	}
	return 0
}

func (x *OperatorSetProto) GetIrVersionPrerelease() string {
	if x != nil {
		return x.IrVersionPrerelease
	}
	return ""
}

func (x *OperatorSetProto) GetIrBuildMetadata() string {
	if x != nil {
		return x.IrBuildMetadata
	}
	return ""
}

func (x *OperatorSetProto) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *OperatorSetProto) GetOpsetVersion() int64 {
	if x != nil {
		return x.OpsetVersion
	}
	return 0
}

func (x *OperatorSetProto) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *OperatorSetProto) GetOperator() []*OperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *OperatorSetProto) GetFunctions() []*FunctionProto {
	if x != nil {
		return x.Functions
	}
	return nil
}

var File_onnx_operators_ml_proto protoreflect.FileDescriptor

var file_onnx_operators_ml_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x6e, 0x6e, 0x78, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2d, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x1a, 0x0d, 0x6f, 0x6e, 0x6e, 0x78, 0x2d, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0xeb, 0x02, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x48,
	0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_onnx_operators_ml_proto_rawDescOnce sync.Once
	file_onnx_operators_ml_proto_rawDescData = file_onnx_operators_ml_proto_rawDesc
)

func file_onnx_operators_ml_proto_rawDescGZIP() []byte {
	file_onnx_operators_ml_proto_rawDescOnce.Do(func() {
		file_onnx_operators_ml_proto_rawDescData = protoimpl.X.CompressGZIP(file_onnx_operators_ml_proto_rawDescData)
	})
	return file_onnx_operators_ml_proto_rawDescData
}

var file_onnx_operators_ml_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_onnx_operators_ml_proto_goTypes = []any{
	(*OperatorProto)(nil),    // 0: protos.OperatorProto
	(*OperatorSetProto)(nil), // 1: protos.OperatorSetProto
	(OperatorStatus)(0),      // 2: protos.OperatorStatus
	(*FunctionProto)(nil),    // 3: protos.FunctionProto
}
var file_onnx_operators_ml_proto_depIdxs = []int32{
	2, // 0: protos.OperatorProto.status:type_name -> protos.OperatorStatus
	0, // 1: protos.OperatorSetProto.operator:type_name -> protos.OperatorProto
	3, // 2: protos.OperatorSetProto.functions:type_name -> protos.FunctionProto
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_onnx_operators_ml_proto_init() }
func file_onnx_operators_ml_proto_init() {
	if File_onnx_operators_ml_proto != nil {
		return
	}
	file_onnx_ml_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onnx_operators_ml_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_onnx_operators_ml_proto_goTypes,
		DependencyIndexes: file_onnx_operators_ml_proto_depIdxs,
		MessageInfos:      file_onnx_operators_ml_proto_msgTypes,
	}.Build()
	File_onnx_operators_ml_proto = out.File
	file_onnx_operators_ml_proto_rawDesc = nil
	file_onnx_operators_ml_proto_goTypes = nil
	file_onnx_operators_ml_proto_depIdxs = nil
}
